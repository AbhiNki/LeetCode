int max=0;
    int min=0;
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> list =new ArrayList<>();
        if(root==null)
            return list;
        
        
        computeRange(root, 0);
        Queue<TreeNode> queue =new LinkedList<TreeNode>();
        Queue<Integer> idxQue =new LinkedList<Integer>();
        queue.add(root);
        idxQue.add(-min);
        for( int i=min;i<=max;i++)
        {
            list.add(new ArrayList<>());
        }
        while(!queue.isEmpty())
        {
            TreeNode node=queue.poll();
            int i=idxQue.poll();        
            list.get(i).add(node.val);
            
            if(root.left!=null)
            {
                queue.add(root.left);
                idxQue.add(i-1);
            }
            if(root.right!=null)
            {
                queue.add(root.right);
                idxQue.add(i+1);
            }
        } 
        return list;
    }
    
    public void computeRange(TreeNode root, int index)
    {
        if(root==null)return;
        min=Math.min(min, index);
        max=Math.max(max, index);
        
        computeRange(root.left, index-1);
        computeRange(root.right, index+1);
    }
}